import os
import sqlite3
import random
import asyncio
from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler

TOKEN = "7753558502:AAFCnmIG38JOyTz6hfN7p5YTh-paoVEn8Wo"

bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()

# üìå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("finance.db", check_same_thread=False)
cursor = conn.cursor()

# üìå –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
cursor.execute('''
    CREATE TABLE IF NOT EXISTS transactions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        type TEXT, 
        category TEXT DEFAULT '–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
        amount REAL,
        date TEXT DEFAULT CURRENT_TIMESTAMP
    )
''')
conn.commit()

# üìå –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
MOTIVATION_QUOTES = [
    "üöÄ –ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –≤–µ–¥—É—Ç –∫ –±–æ–ª—å—à–∏–º –ø–æ–±–µ–¥–∞–º!",
    "üí∞ –ö–æ–Ω—Ç—Ä–æ–ª—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤ ‚Äì –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –±–æ–≥–∞—Ç—Å—Ç–≤—É!",
    "üìä –í–µ–¥–∏ —É—á—ë—Ç —Å–µ–≥–æ–¥–Ω—è, —á—Ç–æ–±—ã –∂–∏—Ç—å –ª—É—á—à–µ –∑–∞–≤—Ç—Ä–∞!",
    "üéØ –£—Å–ø–µ—Ö ‚Äì —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏ –∫–æ–Ω—Ç—Ä–æ–ª—è!",
    "üî• –¢—ã –º–æ–ª–æ–¥–µ—Ü, –ø—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
]

# üìå –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
def clean_text(text):
    return text.strip().lower()

# üìå –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def start(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏.\n\n"
                         "üí∞ –î–æ—Ö–æ–¥: 120000 –∑–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ—Ö–æ–¥\n"
                         "üí∏ –†–∞—Å—Ö–æ–¥: 300 —Ç–∞–∫—Å–∏ —Ä–∞—Å—Ö–æ–¥\n"
                         "üìä –ë–∞–ª–∞–Ω—Å: –±–∞–ª–∞–Ω—Å\n"
                         "üîÑ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö: –æ—á–∏—Å—Ç–∏—Ç—å")

# üìå –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É–º–º—ã
def parse_amount(text):
    try:
        return float(text.replace(",", "."))  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —á–∏—Å–µ–ª —Å –∑–∞–ø—è—Ç–æ–π
    except ValueError:
        return None

# üìå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
@router.message()
async def add_transaction(message: types.Message):
    try:
        text = clean_text(message.text)
        parts = text.split(maxsplit=2)  # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ 3 —á–∞—Å—Ç–∏: —Å—É–º–º–∞, –∫–∞—Ç–µ–≥–æ—Ä–∏—è, —Ç–∏–ø (–¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥)

        if len(parts) < 3:
            await message.answer("‚ùå –û—à–∏–±–∫–∞! –ù–∞–ø–∏—à–∏ —Å—É–º–º—É, –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥.\n\n"
                                 "–ü—Ä–∏–º–µ—Ä: 300 —Ç–∞–∫—Å–∏ —Ä–∞—Å—Ö–æ–¥ –∏–ª–∏ 120000 –∑–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ—Ö–æ–¥")
            return

        amount = parse_amount(parts[0])
        category = parts[1].strip()
        transaction_type = parts[2].strip()

        if amount is None:
            await message.answer("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: 300 —Ç–∞–∫—Å–∏ —Ä–∞—Å—Ö–æ–¥")
            return

        if transaction_type not in ["–¥–æ—Ö–æ–¥", "—Ä–∞—Å—Ö–æ–¥"]:
            await message.answer("‚ùå –û—à–∏–±–∫–∞! –£–∫–∞–∂–∏ –¥–æ—Ö–æ–¥ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥ –≤ –∫–æ–Ω—Ü–µ.\n\n"
                                 "–ü—Ä–∏–º–µ—Ä: 300 —Ç–∞–∫—Å–∏ —Ä–∞—Å—Ö–æ–¥ –∏–ª–∏ 120000 –∑–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ—Ö–æ–¥")
            return

        # üìå –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transaction_type = "income" if transaction_type == "–¥–æ—Ö–æ–¥" else "expense"

        cursor.execute("INSERT INTO transactions (type, category, amount) VALUES (?, ?, ?)", 
                       (transaction_type, category, abs(amount)))
        conn.commit()

        emoji = "‚úÖ" if transaction_type == "income" else "‚ùå"
        motivation = random.choice(MOTIVATION_QUOTES)

        await message.answer(f"{emoji} {abs(amount)} —Å–æ–º ({category}) –∑–∞–ø–∏—Å–∞–Ω–æ!\n\n{motivation}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å –≤–≤–æ–¥.\n\n–û—à–∏–±–∫–∞: {e}")

# üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ (—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)
@router.message(Command("–±–∞–ª–∞–Ω—Å"))
async def get_balance(message: types.Message):
    cursor.execute("SELECT SUM(amount) FROM transactions WHERE type='income'")
    income = cursor.fetchone()[0] or 0

    cursor.execute("SELECT SUM(amount) FROM transactions WHERE type='expense'")
    expense = cursor.fetchone()[0] or 0

    balance = income - expense

    # üìå –ë–∞–ª–∞–Ω—Å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–æ—Ö–æ–¥–æ–≤
    cursor.execute("SELECT category, SUM(amount) FROM transactions WHERE type='income' GROUP BY category")
    income_details = cursor.fetchall()
    income_text = "\n".join([f"üí∞ {cat.capitalize()}: {amt} —Å–æ–º" for cat, amt in income_details]) if income_details else "üí∞ –ù–µ—Ç –¥–æ—Ö–æ–¥–æ–≤"

    # üìå –ë–∞–ª–∞–Ω—Å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ä–∞—Å—Ö–æ–¥–æ–≤
    cursor.execute("SELECT category, SUM(amount) FROM transactions WHERE type='expense' GROUP BY category")
    expense_details = cursor.fetchall()
    expense_text = "\n".join([f"üí∏ {cat.capitalize()}: {amt} —Å–æ–º" for cat, amt in expense_details]) if expense_details else "üí∏ –ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤"

    await message.answer(f"–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {balance} —Å–æ–º\n\n"
                         f"üí∞ –î–æ—Ö–æ–¥: {income} —Å–æ–º\n{income_text}\n\n"
                         f"üí∏ –†–∞—Å—Ö–æ–¥: {expense} —Å–æ–º\n{expense_text}")

# üìå –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
@router.message(Command("–æ—á–∏—Å—Ç–∏—Ç—å"))
async def clear_data(message: types.Message):
    cursor.execute("DELETE FROM transactions")
    conn.commit()
    await message.answer("üóë –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!")

# üìå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç –≤ 9:00 —É—Ç—Ä–∞
async def send_daily_report():
    cursor.execute("SELECT SUM(amount) FROM transactions WHERE type='income'")
    income = cursor.fetchone()[0] or 0

    cursor.execute("SELECT SUM(amount) FROM transactions WHERE type='expense'")
    expense = cursor.fetchone()[0] or 0

    balance = income - expense

    cursor.execute("SELECT category, SUM(amount) FROM transactions WHERE type='income' GROUP BY category")
    income_details = cursor.fetchall()
    income_text = "\n".join([f"üí∞ {cat.capitalize()}: {amt} —Å–æ–º" for cat, amt in income_details]) if income_details else "üí∞ –ù–µ—Ç –¥–æ—Ö–æ–¥–æ–≤"

    cursor.execute("SELECT category, SUM(amount) FROM transactions WHERE type='expense' GROUP BY category")
    expense_details = cursor.fetchall()
    expense_text = "\n".join([f"üí∏ {cat.capitalize()}: {amt} —Å–æ–º" for cat, amt in expense_details]) if expense_details else "üí∏ –ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤"

    report = (f"üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç\n\n"
              f"–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {balance} —Å–æ–º\n\n"
              f"üí∞ –î–æ—Ö–æ–¥: {income} —Å–æ–º\n{income_text}\n\n"
              f"üí∏ –†–∞—Å—Ö–æ–¥: {expense} —Å–æ–º\n{expense_text}")

    await bot.send_message(chat_id="–¢–í–û–ô_CHAT_ID", text=report)

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
