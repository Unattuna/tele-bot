import sqlite3
from aiogram import Bot, Dispatcher, types, Router, F
import asyncio

TOKEN = "7753558502:AAFCnmIG38JOyTz6hfN7p5YTh-paoVEn8Wo"

bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()

# üìå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("finance.db", check_same_thread=False)
cursor = conn.cursor()

# üìå –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
cursor.execute('''
    CREATE TABLE IF NOT EXISTS transactions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        type TEXT, 
        category TEXT DEFAULT '–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
        amount REAL
    )
''')
conn.commit()

# üìå –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ (—É–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ–ª–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
def clean_text(text):
    return text.strip().lower()

# üìå –ö–æ–º–∞–Ω–¥–∞ "—Å—Ç–∞—Ä—Ç"
@router.message()
async def start(message: types.Message):
    if clean_text(message.text) in ["—Å—Ç–∞—Ä—Ç", "/start"]:
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏.\n\n"
                             "üí∞ **–î–æ—Ö–æ–¥:** –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ **1000 –∑–∞—Ä–ø–ª–∞—Ç–∞**\n"
                             "üí∏ **–†–∞—Å—Ö–æ–¥:** –ù–∞–ø—Ä–∏–º–µ—Ä, **500 —Ç–∞–∫—Å–∏**\n"
                             "üìä **–ë–∞–ª–∞–Ω—Å:** –ù–∞–ø–∏—à–∏ **–±–∞–ª–∞–Ω—Å**\n"
                             "üîÑ **–°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:** **–æ—á–∏—Å—Ç–∏—Ç—å**")
        return

    # üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    if clean_text(message.text) in ["–±–∞–ª–∞–Ω—Å", "/–±–∞–ª–∞–Ω—Å"]:
        cursor.execute("SELECT SUM(amount) FROM transactions WHERE type='income'")
        income = cursor.fetchone()[0] or 0

        cursor.execute("SELECT SUM(amount) FROM transactions WHERE type='expense'")
        expense = cursor.fetchone()[0] or 0

        balance = income - expense

        # üìå –ë–∞–ª–∞–Ω—Å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–æ—Ö–æ–¥–æ–≤
        cursor.execute("SELECT category, SUM(amount) FROM transactions WHERE type='income' GROUP BY category")
        income_details = cursor.fetchall()
        income_text = "\n".join([f"üí∞ {cat.capitalize()}: {amt} —Å–æ–º" for cat, amt in income_details]) if income_details else "üí∞ –ù–µ—Ç –¥–æ—Ö–æ–¥–æ–≤"

        # üìå –ë–∞–ª–∞–Ω—Å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ä–∞—Å—Ö–æ–¥–æ–≤
        cursor.execute("SELECT category, SUM(amount) FROM transactions WHERE type='expense' GROUP BY category")
        expense_details = cursor.fetchall()
        expense_text = "\n".join([f"üí∏ {cat.capitalize()}: {amt} —Å–æ–º" for cat, amt in expense_details]) if expense_details else "üí∏ –ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤"

        await message.answer(f"üìä **–¢–≤–æ–π –±–∞–ª–∞–Ω—Å:** {balance} —Å–æ–º\n\n"
                             f"üí∞ **–î–æ—Ö–æ–¥:** {income} —Å–æ–º\n{income_text}\n\n"
                             f"üí∏ **–†–∞—Å—Ö–æ–¥:** {expense} —Å–æ–º\n{expense_text}")
        return

    # üìå –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    if clean_text(message.text) in ["–æ—á–∏—Å—Ç–∏—Ç—å", "/–æ—á–∏—Å—Ç–∏—Ç—å"]:
        cursor.execute("DELETE FROM transactions")
        conn.commit()
        await message.answer("üóëÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!")
        return

    # üìå –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É–º–º—ã
    def parse_amount(text):
        try:
            return float(text.replace(",", "."))  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —á–∏—Å–µ–ª —Å –∑–∞–ø—è—Ç–æ–π
        except ValueError:
            return None

    # üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "500 –¥–æ—Å—Ç–∞–≤–∫–∞" –∏–ª–∏ "1000 –∑–∞—Ä–ø–ª–∞—Ç–∞")
    try:
        parts = message.text.strip().split(maxsplit=1)  # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ 2 —á–∞—Å—Ç–∏: —Å—É–º–º–∞ + –∫–∞—Ç–µ–≥–æ—Ä–∏—è

        if len(parts) < 2:
            await message.answer("‚ùå –û—à–∏–±–∫–∞! –ù–∞–ø–∏—à–∏ —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: **500 —Ç–∞–∫—Å–∏** –∏–ª–∏ **1000 –∑–∞—Ä–ø–ª–∞—Ç–∞**")
            return

        amount = parse_amount(parts[0])
        category = parts[1].strip().lower()

        if amount is None:
            await message.answer("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—É–º–º—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: **500 —Ç–∞–∫—Å–∏** –∏–ª–∏ **1000 –∑–∞—Ä–ø–ª–∞—Ç–∞**")
            return

        transaction_type = "income" if amount > 0 else "expense"

        cursor.execute("INSERT INTO transactions (type, category, amount) VALUES (?, ?, ?)", 
                       (transaction_type, category, abs(amount)))
        conn.commit()

        emoji = "‚úÖ" if transaction_type == "income" else "‚ùå"
        await message.answer(f"{emoji} **{abs(amount)} —Å–æ–º** ({category}) –∑–∞–ø–∏—Å–∞–Ω–æ!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å –≤–≤–æ–¥.\n\n–û—à–∏–±–∫–∞: {e}")

# üìå –î–æ–±–∞–≤–ª—è–µ–º `router` –≤ `Dispatcher`
dp.include_router(router)

# üìå –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
